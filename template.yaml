AWSTemplateFormatVersion: '2010-09-09'
Resources:
  EC2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-0c55b159cbfafe1f0'
      Tags:
        - Key: "Name"
          Value: "StartStopEC2"
        - Key: "AutoStartStop"
          Value: "True"
  
  EC2SchedulerLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: 'testgermanbucket'
        S3Key: 'lambda-ec2-scheduler.zip'
      Runtime: 'python3.10'
      MemorySize: 512
      Timeout: 10
  
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'StartStopLambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ec2:StartInstances'
                  - 'ec2:StopInstances'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'

  StartEC2Rule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Rule to start EC2 instance at 8 AM daily'
      ScheduleExpression: 'cron(0 8 * * ? *)'
      Targets:
        - Arn: !GetAtt EC2SchedulerLambda.Arn
          Id: "StartEC2LambdaTarget"
          Input: '{"action": "start"}'
  
  StopEC2Rule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Rule to stop EC2 instance at 8 PM daily'
      ScheduleExpression: 'cron(0 20 * * ? *)'
      Targets:
        - Arn: !GetAtt EC2SchedulerLambda.Arn
          Id: "StopEC2LambdaTarget"
          Input: '{"action": "stop"}'
  
  StartLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref EC2SchedulerLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt StartEC2Rule.Arn
  
  StopLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref EC2SchedulerLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt StopEC2Rule.Arn
